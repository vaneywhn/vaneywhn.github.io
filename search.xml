<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>字符全排列</title>
      <link href="/2018/08/30/%E5%AD%97%E7%AC%A6%E5%85%A8%E6%8E%92%E5%88%97/"/>
      <url>/2018/08/30/%E5%AD%97%E7%AC%A6%E5%85%A8%E6%8E%92%E5%88%97/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://gratisography.com/thumbnails/gratisography-282-thumbnail.jpg" alt="图片描述"></p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;String&gt; <span class="title">Permutation</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="keyword">null</span> &amp;&amp; str.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            PermutationHelper(str.toCharArray(), <span class="number">0</span>, res);</span><br><span class="line">            Collections.sort(res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (ArrayList)res;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">PermutationHelper</span><span class="params">(<span class="keyword">char</span>[] cs, <span class="keyword">int</span> start, List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == cs.length - <span class="number">1</span>) &#123;           <span class="comment">//当交换发生在最后一个，也是单个字符的特例</span></span><br><span class="line">            String val = String.valueOf(cs);</span><br><span class="line">            <span class="keyword">if</span> (!list.contains(val))            <span class="comment">//重复字符串的判定（当字符串中存在重复字符时）</span></span><br><span class="line">                list.add(val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = start; j &lt; cs.length; j++) &#123;</span><br><span class="line">                swap(cs, start, j);                     <span class="comment">//在剩余的字符数组中选择一个字符作为头，剩下的字符递归调用</span></span><br><span class="line">                PermutationHelper(cs, start+<span class="number">1</span>, list);   <span class="comment">//剩余的字符的全排列</span></span><br><span class="line">                swap(cs, start, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">char</span>[] cs, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> temp = cs[i];</span><br><span class="line">        cs[i] = cs[j];</span><br><span class="line">        cs[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Solution p = <span class="keyword">new</span> Solution();</span><br><span class="line">        System.out.println(p.Permutation(<span class="string">"abc"</span>).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> JAVA算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>二叉树遍历递归与非递归java实现</title>
      <link href="/2018/08/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E9%80%92%E5%BD%92%E4%B8%8E%E9%9D%9E%E9%80%92%E5%BD%92java%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/08/30/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E9%80%92%E5%BD%92%E4%B8%8E%E9%9D%9E%E9%80%92%E5%BD%92java%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://gratisography.com/thumbnails/gratisography-282-thumbnail.jpg" alt="图片描述"></p><hr><h2 id="二叉树结点结构"><a href="#二叉树结点结构" class="headerlink" title="二叉树结点结构"></a>二叉树结点结构</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> x)&#123;</span><br><span class="line">        val=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"val: "</span>+val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 递归先序遍历</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrderRecursion</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(node==<span class="keyword">null</span>) <span class="comment">//如果结点为空则返回</span></span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       visit(node);<span class="comment">//访问根节点</span></span><br><span class="line">       preOrderRecursion(node.left);<span class="comment">//访问左孩子</span></span><br><span class="line">       preOrderRecursion(node.right);<span class="comment">//访问右孩子</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h3><p>1、首先申请一个新的栈，记为stack。<br><br>2、将头结点head压入stack中。<br><br>3、每次从stack中弹出栈顶节点，记为cur，然后打印cur节点的值。如果cur右孩子不为空的话，将cur的右孩子先压入stack中。最后如果cur的左孩子不为空的话，将cur的左孩子压入stack中。<br><br>4.不断重复步骤3，直到stack为空，全部过程结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 非递归先序遍历二叉树</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">       List&lt;Integer&gt; resultList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       Stack&lt;TreeNode&gt; treeStack=<span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">       <span class="keyword">if</span>(root==<span class="keyword">null</span>) <span class="comment">//如果为空树则返回</span></span><br><span class="line">           <span class="keyword">return</span> resultList;</span><br><span class="line">       treeStack.push(root);</span><br><span class="line">       <span class="keyword">while</span>(!treeStack.isEmpty())&#123;</span><br><span class="line">           TreeNode tempNode=treeStack.pop(); </span><br><span class="line">           <span class="keyword">if</span>(tempNode!=<span class="keyword">null</span>)&#123;</span><br><span class="line">               resultList.add(tempNode.val);<span class="comment">//访问根节点</span></span><br><span class="line">               treeStack.push(tempNode.right); <span class="comment">//入栈右孩子</span></span><br><span class="line">               treeStack.push(tempNode.left);<span class="comment">//入栈左孩子</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> resultList;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><h3 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 递归中序遍历</span></span><br><span class="line"><span class="comment">   **/</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrderRecursion</span><span class="params">(TreeNode node)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(node==<span class="keyword">null</span>) <span class="comment">//如果结点为空则返回</span></span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       preOrderRecursion(node.left);<span class="comment">//访问左孩子</span></span><br><span class="line">       visit(node);<span class="comment">//访问根节点</span></span><br><span class="line">       preOrderRecursion(node.right);<span class="comment">//访问右孩子</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="非递归-1"><a href="#非递归-1" class="headerlink" title="非递归"></a>非递归</h3><p>1、申请一个新的栈，记为stack，申请一个变量cur，初试时令cur等于头节点。<br><br>2、先把cur节点压入stack中，对以cur节点为头的整颗子树来说，依次吧整颗书的左边界压入栈中，即不断令cur=cur.left，然后重复步骤2。<br><br>3、不断重复步骤2，直到发现cur为空，此时从stack中弹出一个节点，记为node。打印node的值，并让cur=node.right，然后继续重复步骤2。<br><br>4.当stack为空并且cur为空时，整个过程结束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">    Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</span><br><span class="line">    TreeNode cur = root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(cur!=<span class="keyword">null</span> || !stack.empty())&#123;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            stack.add(cur);</span><br><span class="line">            cur = cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = stack.pop();</span><br><span class="line">        list.add(cur.val);</span><br><span class="line">        cur = cur.right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><h3 id="非递归-2"><a href="#非递归-2" class="headerlink" title="非递归"></a>非递归</h3><p>先采用类似先序遍历，先遍历根结点再右孩子最后左孩子（先序是先根结点再左孩子最后右孩子），最后把遍历的序列逆转即得到了后序遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">postorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    stack.push(root);</span><br><span class="line">    List&lt;Integer&gt; ret = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">        TreeNode node = stack.pop();</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ret.add(node.val);</span><br><span class="line">            stack.push(node.left);</span><br><span class="line">            stack.push(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Collections.reverse(ret);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA 二叉树遍历 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>判断两链表是否相交</title>
      <link href="/2018/08/14/%E5%88%A4%E6%96%AD%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E7%9B%B8%E4%BA%A4/"/>
      <url>/2018/08/14/%E5%88%A4%E6%96%AD%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E7%9B%B8%E4%BA%A4/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://gratisography.com/thumbnails/gratisography-282-thumbnail.jpg" alt="图片描述"></p><hr><h1 id="1、如何判断两单链表（无环）是否相交？"><a href="#1、如何判断两单链表（无环）是否相交？" class="headerlink" title="1、如何判断两单链表（无环）是否相交？"></a>1、如何判断两单链表（无环）是否相交？</h1><p>&nbsp;有两种可取的办法：<br> （1）人为构环，将链表A的尾节点指向链表B，再判断是否构环成功？从链表B的头指针往下遍历，如果能够回到B，则说明相交<br> （2）判断两链表最后一个节点是否相同，如果相交，则尾节点肯定是同一节点<br> <br><br><a id="more"></a></p><h1 id="2、如何判断两单链表（不知是否有环）相交？"><a href="#2、如何判断两单链表（不知是否有环）相交？" class="headerlink" title="2、如何判断两单链表（不知是否有环）相交？"></a>2、如何判断两单链表（不知是否有环）相交？</h1><p>&nbsp;先判断是否有环，判断是否有环可以使用追逐办法，设置两个指针，一个走一步，一个走两步，如果能相遇则说明存在环<br> &nbsp;&nbsp;（1）两个都没环：回到问题1<br> &nbsp;&nbsp;（2）一个有环，一个没环：不用判断了，肯定两链表不相交<br> &nbsp;&nbsp;（3）两个都有环：判断链表A的碰撞点是否出现在链表B的环中，如果在，则相交。（相交时，环必定是两链表共有的）<br> <br></p><h1 id="3、如何寻找两相交链表（不知是否有环）的第一个相交节点？"><a href="#3、如何寻找两相交链表（不知是否有环）的第一个相交节点？" class="headerlink" title="3、如何寻找两相交链表（不知是否有环）的第一个相交节点？"></a>3、如何寻找两相交链表（不知是否有环）的第一个相交节点？</h1><p>&nbsp;同样，使用追逐办法先判断是否存在环，分情况讨论<br>&nbsp;&nbsp;（1）无环：人为构环，将链表A的尾节点指向链表B，则构成一个带环的单链表。这个问题就转换成寻找带环单链表的环入口节点。<br>    解法参考：<a href="http://blog.csdn.net/liuxialong/archive/2011/06/20/6555850.aspx" target="_blank" rel="noopener">http://blog.csdn.net/liuxialong/archive/2011/06/20/6555850.aspx</a><br>&nbsp;&nbsp;（2）有环：计算出两链表的长度lA、lB，【环的长度和环到入口点长度之和就是链表长度】<br>    计算带环链表长度,解法参考：<a href="http://blog.csdn.net/liuxialong/archive/2011/06/20/6555850.aspx" target="_blank" rel="noopener">http://blog.csdn.net/liuxialong/archive/2011/06/20/6555850.aspx</a><br>&nbsp;&nbsp;&nbsp;如果lA&gt;lB，则链表A指针先走lA-lB，然后链表B指针开始走，两者相遇的点就是相交点<br>&nbsp;&nbsp;&nbsp;如果lB&gt;lA，则链表B指针先走lB-lA，然后链表A指针开始走，两者相遇的点就是相交点</p>]]></content>
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA 链表 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JVM相关知识点汇总</title>
      <link href="/2018/08/12/JVM%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/"/>
      <url>/2018/08/12/JVM%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="JVM的垃圾回收机制"><a href="#JVM的垃圾回收机制" class="headerlink" title="JVM的垃圾回收机制"></a>JVM的垃圾回收机制</h1><h2 id="Where：运行内存"><a href="#Where：运行内存" class="headerlink" title="Where：运行内存"></a>Where：运行内存</h2><p><img src="http://ojirj5wkr.bkt.clouddn.com/image/hexo/java-memory.jpg" alt="图片描述"></p><h2 id="When："><a href="#When：" class="headerlink" title="When："></a>When：</h2><p>对象何时要被回收：1.引用计数法；2.可达性分析算法。<br></p><h3 id="Minor-GC与Full-GC分别在什么时候发生？"><a href="#Minor-GC与Full-GC分别在什么时候发生？" class="headerlink" title="Minor GC与Full GC分别在什么时候发生？"></a>Minor GC与Full GC分别在什么时候发生？</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果 Eden 空间占满了，会触发 minor GC。Minor GC后仍然存活的对象会被复制到S0中去。这样Eden就被清空可以分配给新的对象。又触发了一次 Minor GC，S0和Eden中存活的对象被复制到S1中，并且S0和Eden被清空。 在同一时刻,只有Eden和一个Survivor Space同时被操作.当每次对象从Eden复制到Survivor Space或者从Survivor Space中的一个复制到另外一个，有一个计数器会自动增加值。默认情况下如果复制发生超过16次，JVM 会停止复制并把他们移到老年代中去。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果一个对象不能在 Eden 中被创建，它会直接被创建在老年代中。如果老年代的空间被占满会触发老年代的 GC，也被称为Full GC。Full GC是一个压缩处理过程，所以它比Minor GC要慢很多。<br></p><h2 id="How：四种垃圾回收算法"><a href="#How：四种垃圾回收算法" class="headerlink" title="How：四种垃圾回收算法"></a>How：四种垃圾回收算法</h2><p>1.引用计数法<br>2.标记清除法<br>3.标记压缩法<br>4.复制算法</p><hr><h1 id="内存泄漏和内存溢出"><a href="#内存泄漏和内存溢出" class="headerlink" title="内存泄漏和内存溢出"></a>内存泄漏和内存溢出</h1><h2 id="内存泄漏原因（Jconsole查找内存泄漏原因）"><a href="#内存泄漏原因（Jconsole查找内存泄漏原因）" class="headerlink" title="内存泄漏原因（Jconsole查找内存泄漏原因）"></a>内存泄漏原因（Jconsole查找内存泄漏原因）</h2><p>①静态集合类（长生命周期对象持有短生命周期对象的引用，使得短生命周期对象得不到合理地释放）<br></p><p>②各种连接，建立连接，等不再使用后没有调用close方法关闭连接，垃圾回收器无法回收对应对象导致内存泄漏</p><p>③监听器，在释放监听对象后，没有相应地删除监听器。</p><p>④变量不合理的作用域。一方面变量定义的作用范围大于其使用范围；另一方面，没有及时地吧对象设置成Null。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>1、尽量少使用静态变量（静态变量存放在方法区，基本不参与垃圾回收）；</p><p>2、尽早释放无用对象的引用；</p><p>3、使用字符串处理，避免使用String,而应该使用StringBuffer；</p><p>4、避免在循环中创建对象。</p><h2 id="内存溢出原因"><a href="#内存溢出原因" class="headerlink" title="内存溢出原因"></a>内存溢出原因</h2><p>内存溢出指程序运行过程中无法申请到足够的内存而导致的一种错误</p><h3 id="①虚拟机栈和本地方法栈溢出"><a href="#①虚拟机栈和本地方法栈溢出" class="headerlink" title="①虚拟机栈和本地方法栈溢出"></a>①虚拟机栈和本地方法栈溢出<br></h3><p>如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常。如果虚拟机在扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。</p><h3 id="②堆溢出"><a href="#②堆溢出" class="headerlink" title="②堆溢出"></a>②堆溢出<br></h3><p>1.判断是内存泄漏还是内存溢出；2.查找原因；</p><h3 id="③方法区溢出"><a href="#③方法区溢出" class="headerlink" title="③方法区溢出"></a>③方法区溢出<br></h3><p>异常信息：java.lang.OutOfMemoryError:Perm Genspace。</p><h3 id="④运行时常量池溢出"><a href="#④运行时常量池溢出" class="headerlink" title="④运行时常量池溢出"></a>④运行时常量池溢出<br></h3><p>异常信息：java.lang.OutOfMemoryError:Perm Genspace。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">溢出原因：</span><br><span class="line">1、内存中加载的数据量过于庞大，如一次从数据库取出过多数据；</span><br><span class="line">2、集合类中有对对象的引用，使用完后未清空，使得JVM不能回收；</span><br><span class="line">3、代码中存在死循环或循环产生过多重复的对象实体；</span><br><span class="line">4、启动参数内存值设定的过小。</span><br></pre></td></tr></table></figure><h1 id="如何减少gc-出现的次数"><a href="#如何减少gc-出现的次数" class="headerlink" title="如何减少gc 出现的次数"></a>如何减少gc 出现的次数</h1><p>（1）<strong>对象不用时最好显式置为Null</strong><br>一般而言,为Null的对象都会被作为垃圾处理,所以将不用的对象显式地设为Null,有利于GC收集器判定垃圾,从而提高了GC的效率。</p><p>（2）<strong>尽量少用System.gc()</strong></p><p>此函数建议JVM进行主GC,虽然只是建议而非一定,但很多情况下它会触发主GC,从而增加主GC的频率,也即增加了间歇性停顿的次数。</p><p>（3）<strong>尽量少用静态变量</strong></p><p>静态变量属于全局变量,不会被GC回收,它们会一直占用内存。</p><p>（4）<strong>尽量使用StringBuffer,而不用String来累加字符串</strong><br>由于String是固定长的字符串对象,累加String对象时,并非在一个String对象中扩增,而是重新创建新的String对象,如Str5=Str1+Str2+Str3+Str4,这条语句执行过程中会产生多个垃圾对象,因为对次作“+”操作时都必须创建新的String对象,但这些过渡对象对系统来说是没有实际意义的,只会增加更多的垃圾。避免这种情况可以改用StringBuffer来累加字符串,因StringBuffer是可变长的,它在原有基础上进行扩增,不会产生中间对象。</p><p>（5）<strong>分散对象创建或删除的时间</strong></p><p>集中在短时间内大量创建新对象,特别是大对象,会导致突然需要大量内存,JVM在面临这种情况时,只能进行主GC,以回收内存或整合内存碎片,从而增加主GC的频率。</p><p>（6）<strong>尽量少用finalize函数。因为它会加大GC的工作量，因此尽量少用finalize方式回收资源。</strong></p><p>（7）<strong>如果需要使用经常用到的图片，可以使用软引用类型，它可以尽可能图片保存在内存中，供程序调用，而不引起OutOfMemory。</strong></p>]]></content>
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>线程安全的单例模式编写</title>
      <link href="/2018/08/12/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%BC%96%E5%86%99/"/>
      <url>/2018/08/12/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%BC%96%E5%86%99/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="利用静态内部类实现单例模式"><a href="#利用静态内部类实现单例模式" class="headerlink" title="利用静态内部类实现单例模式"></a>利用静态内部类实现单例模式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">T</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton t = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> T.t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用双重校验锁DCL（double-checked-locking）"><a href="#使用双重校验锁DCL（double-checked-locking）" class="headerlink" title="使用双重校验锁DCL（double checked locking）"></a>使用双重校验锁DCL（double checked locking）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用synchronized关键字"><a href="#使用synchronized关键字" class="headerlink" title="使用synchronized关键字"></a>使用synchronized关键字</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton s = <span class="keyword">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">s = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="构造函数的特点"><a href="#构造函数的特点" class="headerlink" title="构造函数的特点"></a><font color="red">构造函数的特点</font></h1><p>1.<font color="red">构造函数必须和类名一样</font>（但和类名一样的不一定是构造方法，普通方法也可以和类名同名），并且 <strong><font color="red">不能有返回值，返回值也不能为void</font></strong>。</p><p>2.构造函数总是伴随着new操作一起调用，并且不能由程序的编写者调用，只能由系统调用。</p><p>3.构造函数不能被继承。</p><p>4.子类可以通过super()来显示调用父类的构造函数。</p><p><font color="red"></font><br>&emsp;&emsp;</p>]]></content>
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java中的集合类</title>
      <link href="/2018/08/12/Java%E4%B8%AD%E7%9A%84%E9%9B%86%E5%90%88%E7%B1%BB/"/>
      <url>/2018/08/12/Java%E4%B8%AD%E7%9A%84%E9%9B%86%E5%90%88%E7%B1%BB/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><p><img src="http://wiki.jikexueyuan.com/project/java-interview-bible/images/collection.jpg" alt="集合框架图"></p><h1 id="ArrayList、LinkedList、Vector的区别和实现原理。"><a href="#ArrayList、LinkedList、Vector的区别和实现原理。" class="headerlink" title="ArrayList、LinkedList、Vector的区别和实现原理。"></a>ArrayList、LinkedList、Vector的区别和实现原理。</h1><p>&emsp;&emsp;ArrayList和Vector只能按顺序存储元素（从下标为0的位置开始），删除元素的时候，需要移位并置空，默认初始容量都是10。<br>ArrayList和Vector基于数组实现的，LinkedList基于双向循环链表实现的（含有头结点）。</p><h2 id="一、线程安全性"><a href="#一、线程安全性" class="headerlink" title="一、线程安全性"></a>一、线程安全性</h2><p>&emsp;&emsp; <strong>ArrayList和LinkedList<font color="red">不具有线程安全性</font></strong>，用在单线程环境中。如果在并发环境下使用它们，可以用Colletions类中的静态方法synchronizedList()对ArrayList和LinkedList进行调用即可。<br><br><strong>Vector是<font color="red">线程安全</font>的</strong>，即它的大部分方法都包含有关键字synchronized。Vector的效率没有ArrayList和LinkedList高。</p><h2 id="二、扩容机制"><a href="#二、扩容机制" class="headerlink" title="二、扩容机制"></a>二、扩容机制</h2><p>从内部实现机制来讲，ArrayList和Vector都是使用Objec的数组形式来存储的。 <strong>ArrayList扩容后的容量是之前的1.5倍</strong>，然后，把之前的数据拷贝到新建的数组。 <strong>Vector默认情况下扩容后的容量是之前的2倍</strong>。<br>Vector可以设置容量增量，而ArrayList不可以。在Vector中有capacityIncrement：向量的大小大于其容量时，容量自动增加的量。如果在创建Vector时，指定了capacityIncrement的大小；则每次当Vector中动态数组容量需要增加时，如果容量的增量大于零，增加的大小都是capacityIncrement。如果容量的增量小于等于零，则每次需要增大容量时，向量的容量将增大为之前的2倍。</p><h2 id="三、增删改查的效率"><a href="#三、增删改查的效率" class="headerlink" title="三、增删改查的效率"></a>三、增删改查的效率</h2><p>ArrayList和Vector中，从指定的位置（用index）检索一个对象，或在集合的末尾插入、删除一个对象的时间是一样的，可表示为O(1)。但是，如果在集合的其他位置增加或移除元素那么花费的时间是O(n)。LinkedList中，在插入、删除集合中任何位置的元素所花费的时间都是一样的—O(1)，但它在索引一个元素的时候比较慢O(n)。</p><h1 id="HashMap、HashTable、LindedHashMap、ConcurrentHashMap、WeakHashMap的区别和实现原理"><a href="#HashMap、HashTable、LindedHashMap、ConcurrentHashMap、WeakHashMap的区别和实现原理" class="headerlink" title="HashMap、HashTable、LindedHashMap、ConcurrentHashMap、WeakHashMap的区别和实现原理"></a>HashMap、HashTable、LindedHashMap、ConcurrentHashMap、WeakHashMap的区别和实现原理</h1><h2 id="HashMap和HashTable原理"><a href="#HashMap和HashTable原理" class="headerlink" title="HashMap和HashTable原理"></a>HashMap和HashTable原理</h2><p>&emsp;&emsp;当程序试图将一个key-value对放入HashMap中时，程序首先计算该key的hashCode()值，然后对该哈希码值进行再哈希，然后把哈希值和（数组长度-1）进行按位与操作，得到存储的数组下标，如果该位置处没有链表节点，那么就直接把包含&lt;key,value&gt;的节点放入该位置。如果该位置有结点，就对链表进行遍历，看是否有hash，key和要放入的节点相同的节点，如果有的话，就替换该节点的value值，如果没有相同的话，就创建节点放入值，并把该节点插入到链表表头(头插法)。</p><h2 id="HashMap和HashTable的区别"><a href="#HashMap和HashTable的区别" class="headerlink" title="HashMap和HashTable的区别"></a>HashMap和HashTable的区别</h2><p>1、Hashtable是线程安全的，方法是Synchronized的，适合在多线程环境中使用，效率稍低；HashMap不是线程安全的，效率稍高，适合在单线程环境下使用，在多线程场合下使用，需要手动同步HashMap，Collections.synchronizedMap()。</p><p>2、 <strong>HashMap的key和value都可以为null值，HashTable的key和value都不允许有Null值</strong>。</p><p>3、HashMap中数组的默认大小是16，而且一定是2的倍数，扩容后的数组长度是之前数组长度的2倍。HashTable中数组默认大小是11，扩容后的数组长度是之前数组长度的2倍+1。</p><p>4、哈希值的使用不同。</p><p>5、判断是否含有某个键。<br><br>&emsp;&emsp;在HashMap中，null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。当get()方法返回null值时，既可以表示HashMap中没有该键，也可以表示该键所对应的值为null。因此，在HashMap中不能用get()方法来判断HashMap中是否存在某个键，而应该用containsKey()方法来判断。Hashtable的键值都不能为null，所以可以用get()方法来判断是否含有某个键</p><h2 id="ConcurrentHashMap-的原理"><a href="#ConcurrentHashMap-的原理" class="headerlink" title="ConcurrentHashMap 的原理"></a>ConcurrentHashMap 的原理</h2><p>&emsp;&emsp;在 ConcurrentHashMap 中，不允许用null作为键和值。ConcurrentHashMap使用分段锁技术，将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问，能够实现真正的并发访问。读操作大部分时候都不需要用到锁。只有在size等操作时才需要锁住整个hash 表。它把区间按照并发级别(concurrentLevel)，分成了若干个 segment。ConcurrentHashMap使用segment来分段和管理锁，segment继承自 ReentrantLock，因 此 ConcurrentHashMap使用ReentrantLock来保证线程安全。</p><h3 id="Get-Object-Key-的实现"><a href="#Get-Object-Key-的实现" class="headerlink" title="Get(Object Key)的实现"></a>Get(Object Key)的实现</h3><p>&emsp;&emsp;get 操作的高效之处在于整个 get 过程不需要加锁，除非读到的值是空的才会加锁重读。之所以不会读到过期的值，是<strong>根据 java 内存模型的 happen before 原则，对volatile 字段的写入操作先于读操作，即使两个线程同时修改和获取volatile变量，get 操作也能拿到最新的值，这是用volatile 替换锁的经典应用场景</strong>。</p><h3 id="Put-K-Key-V-Value-的实现——用Lock加锁"><a href="#Put-K-Key-V-Value-的实现——用Lock加锁" class="headerlink" title="Put(K Key,V Value)的实现——用Lock加锁"></a>Put(K Key,V Value)的实现——用Lock加锁</h3><p>①根据 key 计算出对应的 hash 值；<br><br>②根据 hash 值找到对应的Segment 对象；<br><br>③在这个 Segment 中执行具体的 put 操作；<br><br>插入操作需要经历两个步骤：<br><br>&emsp;&emsp;第一步判断是否需要对Segment 里的HashEntry 数组进行扩容；<br><br>&emsp;&emsp;第二步定位添加元素的位置然后放在HashEntry 数组里。<br></p><h4 id="是否需要扩容？"><a href="#是否需要扩容？" class="headerlink" title="是否需要扩容？"></a>是否需要扩容？</h4><p>&emsp;&emsp;在插入元素前会先判断Segment 里的HashEntry 数组是否超过容量（threshold），如果超过阀值，数组进行扩容。值得一提的是， <strong>Segment的扩容判断比HashMap 更恰当，因为HashMap 是在插入元素后判断元素是否已经到达容量</strong>的，如果到达了就进行扩容，但是很有可能扩容之后没有新元素插入，这时HashMap 就进行了一次无效的扩容。</p><h3 id="Move-Object-Key-的实现"><a href="#Move-Object-Key-的实现" class="headerlink" title="Move(Object Key)的实现"></a>Move(Object Key)的实现</h3><p>暂无总结</p><p><strong>ConcurrentHashMap 的高并发性主要来自于三个方面：<br><br>1、用分离锁实现多个线程间的更深层次的共享访问。<br><br>2、用 HashEntry 对象的不变性来降低执行读操作的线程在遍历链表期间对加锁的需求。<br><br>3、通过对同一个 Volatile 变量的写 / 读访问，协调不同线程间读 / 写操作的内存可见性。</strong></p><h2 id="WeakHashMap和HashMap的区别"><a href="#WeakHashMap和HashMap的区别" class="headerlink" title="WeakHashMap和HashMap的区别"></a>WeakHashMap和HashMap的区别<br></h2><p>WeakHashMap中的key采用的是“弱引用”的方式，只要WeakHashMap中的key不再被外部引用，所对应的键值对就可以被垃圾回收器回收。<br><br>HashMap中的key采用的是“强引用”的方式，当key不再被外部引用时，只有当这个key从HashMap中删除后，才可以被垃圾回收器回收。<br></p><h2 id="HashMap和TreeMap区别："><a href="#HashMap和TreeMap区别：" class="headerlink" title="HashMap和TreeMap区别："></a>HashMap和TreeMap区别：</h2><p>1.实现方式的区别：<br> &emsp;HashMap：基于<strong>哈希表</strong>实现。TreeMap：基于<strong>红黑树</strong>实现。<br>2.TreeMap能够把它保存的记录根据键排序.<br>3.<strong>HashMap</strong>：适用于在Map中插入、删除和查找元素。<br> &emsp;<strong>Treemap</strong>：适用于按自然顺序或自定义顺序遍历键(key)。<br></p><h1 id="Hashset的实现原理"><a href="#Hashset的实现原理" class="headerlink" title="Hashset的实现原理"></a>Hashset的实现原理</h1><p>对于HashSet而言，它是基于HashMap实现的，HashSet底层使用HashMap来保存所有元素。HashSet中的元素都存放在HashMap的key上面，而value中的值都是统一的一个 <strong>privatestaticfinalObjectPRESENT=newObject()</strong>;<br></p><h1 id="Collection和Collections的区别"><a href="#Collection和Collections的区别" class="headerlink" title="Collection和Collections的区别"></a>Collection和Collections的区别</h1><p>Collection是<font color="red">集合类的上级接口</font>，子接口主要有Set和List。<br></p><p>Collections是针对集合类的<font color="red">一个帮助类，提供了操作集合的工具方法</font>：一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作。</p><h1 id="happen-before原则"><a href="#happen-before原则" class="headerlink" title="happen-before原则"></a>happen-before原则</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、程序次序规则：在一个单独的线程中，按照程序代码的执行流顺序，（时间上）先执行的操作happen—before（时间上）后执行的操作。</span><br><span class="line">2、管理锁定规则：一个unlock操作happen—before后面（时间上的先后顺序，下同）对同一个锁的lock操作。</span><br><span class="line">3、volatile变量规则：对一个volatile变量的写操作happen—before后面对该变量的读操作。</span><br><span class="line">4、线程启动规则：Thread对象的start（）方法happen—before此线程的每一个动作。</span><br><span class="line">5、线程终止规则：线程的所有操作都happen—before对此线程的终止检测，可以通过Thread.join（）方法结束、Thread.isAlive（）的返回值等手段检测到线程已经终止执行。</span><br><span class="line">6、线程中断规则：对线程interrupt（）方法的调用happen—before发生于被中断线程的代码检测到中断时事件的发生。</span><br><span class="line">7、对象终结规则：一个对象的初始化完成（构造函数执行结束）happen—before它的finalize（）方法的开始。</span><br><span class="line">8、传递性：如果操作A happen—before操作B，操作B happen—before操作C，那么可以得出A?happen—before操作C。</span><br></pre></td></tr></table></figure><p><font color="red"></font><br>&emsp;&emsp;</p>]]></content>
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JAVA全排列问题</title>
      <link href="/2018/08/12/JAVA%E6%B1%82%E8%A7%A3%E5%85%A8%E6%8E%92%E5%88%97/"/>
      <url>/2018/08/12/JAVA%E6%B1%82%E8%A7%A3%E5%85%A8%E6%8E%92%E5%88%97/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><p>给定一个字符串，求出该字符串的全排列。<br>比如：”abc”的全排列是：abc、acb、bac、bca、cab、cba</p><h1 id="二、实现思路"><a href="#二、实现思路" class="headerlink" title="二、实现思路"></a>二、实现思路</h1><p>采用递归的方式求解。每次先选定一个字符，然后进行“若干次”交换，求出在选定这个字符的条件下，所有的全排列，并把字符“复位”再交换回来。至此，一趟全排列完成。第二趟，选定下一个字符，然后进行“若干次”交换，求出在选定这个字符的条件下，所有的全排列，并把字符“复位”再交换回来。<br></p><a id="more"></a><p>就类似于：(参考网上的解释如下：)<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">设R=&#123;r1,r2,...rn&#125;是要进行排列的n个元素.Ri=R-&#123;ri&#125;.集合X中元素的全排列记为Perm(X).(ri)Perm(X)表示</span><br><span class="line">在全排列Perm(X)的每一个排列前加上前缀ri得到的排列R的全排列可归纳定义如下:</span><br><span class="line">当n=1时,Perm(R)=(r),其中r是集合R中唯一的元素;</span><br><span class="line">当r&gt;1时,Perm(R)由(r1)Perm(r1),(r2)Perm(r2).....(rn)Perm(rn)构成.</span><br><span class="line"></span><br><span class="line">全排列就是从第一个数字起每个数分别与它后面的数字交换</span><br><span class="line">去重的全排列就是从第一个数字起每个数分别与它后面非重复出现的数字交换，</span><br><span class="line">用编程的话描述就是第i个数与第j个数交换时，要求[i,j)中没有与第j个数相等的数。</span><br></pre></td></tr></table></figure><p>代码实现如下：使用一个LinkedList<string>保存每一种排列，如果字符串中出现有重复的字符，则此方法会求出 重复的排列数，因而LinkedList<string>会保存重复的排列。</string></string></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Permutation</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">allPermutation</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="keyword">null</span> || str.length() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//保存所有的全排列</span></span><br><span class="line">        LinkedList&lt;String&gt; listStr = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        </span><br><span class="line">        allPermutation(str.toCharArray(), listStr, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        print(listStr);<span class="comment">//打印全排列</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">allPermutation</span><span class="params">(<span class="keyword">char</span>[] c, LinkedList&lt;String&gt; listStr, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(start == c.length-<span class="number">1</span>)</span><br><span class="line">            listStr.add(String.valueOf(c));</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt;= c.length-<span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                swap(c, i, start);<span class="comment">//相当于: 固定第 i 个字符</span></span><br><span class="line">                allPermutation(c, listStr, start+<span class="number">1</span>);<span class="comment">//求出这种情形下的所有排列</span></span><br><span class="line">                swap(c, start, i);<span class="comment">//复位</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">char</span>[] c, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> tmp;</span><br><span class="line">        tmp = c[i];</span><br><span class="line">        c[i] = c[j];</span><br><span class="line">        c[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(LinkedList&lt;String&gt; listStr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Collections.sort(listStr);<span class="comment">//使字符串按照'字典顺序'输出</span></span><br><span class="line">        <span class="keyword">for</span> (String str : listStr) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"size:"</span> + listStr.size());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//hapjin test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        allPermutation("hapjin");</span></span><br><span class="line">        allPermutation(<span class="string">"abc"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要想让重复的排列只保存一次，有两种方式：①改进算法，不生成重复的排列  ②用HashSet来保存排列</p><p>当字符串中出现重复的字符时，如何生成不重复的排列？—去重的全排列就是从第一个数字起每个数分别与它后面非重复出现的数字交换</p><p>代码实现如下：(当有重复字符时，也可生成所有正确的排列(排列不会重复))</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Permutation</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">allPermutation</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="keyword">null</span> || str.length() == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">//保存所有的全排列</span></span><br><span class="line">        LinkedList&lt;String&gt; listStr = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        </span><br><span class="line">        allPermutation(str.toCharArray(), listStr, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        print(listStr);<span class="comment">//打印全排列</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">allPermutation</span><span class="params">(<span class="keyword">char</span>[] c, LinkedList&lt;String&gt; listStr, <span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(start == c.length-<span class="number">1</span>)</span><br><span class="line">            listStr.add(String.valueOf(c));<span class="comment">//System.out.println(String.valueOf(c));</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt;= c.length-<span class="number">1</span>; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//只有当没有重叠的字符 才交换</span></span><br><span class="line">                <span class="keyword">if</span>(!isSwap(c, start, i))</span><br><span class="line">                &#123;</span><br><span class="line">                    swap(c, i, start);<span class="comment">//相当于: 固定第 i 个字符</span></span><br><span class="line">                    allPermutation(c, listStr, start+<span class="number">1</span>);<span class="comment">//求出这种情形下的所有排列</span></span><br><span class="line">                    swap(c, start, i);<span class="comment">//复位</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">char</span>[] c, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> tmp;</span><br><span class="line">        tmp = c[i];</span><br><span class="line">        c[i] = c[j];</span><br><span class="line">        c[j] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(LinkedList&lt;String&gt; listStr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Collections.sort(listStr);<span class="comment">//使字符串按照'字典顺序'输出</span></span><br><span class="line">        <span class="keyword">for</span> (String str : listStr) &#123;</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"size:"</span> + listStr.size());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//[start,end) 中是否有与 c[end] 相同的字符</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSwap</span><span class="params">(<span class="keyword">char</span>[] c, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i &lt; end; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(c[i] == c[end])</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//hapjin test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        allPermutation("hapjin");</span></span><br><span class="line">        allPermutation(<span class="string">"aba"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的实现将所有的排列顺序都保存到LinkedList<string>了，这是要注意的。当然也可以不保存排列的顺序，直接输出（allPermutation方法）。</string></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(start == c.length-<span class="number">1</span>)</span><br><span class="line">    listStr.add(String.valueOf(c));<span class="comment">//保存排列</span></span><br><span class="line">    <span class="comment">//System.out.println(String.valueOf(c));//不保存排列,直接输出</span></span><br></pre></td></tr></table></figure><pre><code>原文：http://www.cnblogs.com/hapjin/p/5757810.html</code></pre>]]></content>
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA 全排列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>各类数据结构遍历</title>
      <link href="/2018/08/12/%E5%90%84%E7%B1%BB%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%81%8D%E5%8E%86/"/>
      <url>/2018/08/12/%E5%90%84%E7%B1%BB%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%81%8D%E5%8E%86/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h1 id="HashMap的遍历方式"><a href="#HashMap的遍历方式" class="headerlink" title="HashMap的遍历方式"></a>HashMap的遍历方式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet())&#123;</span><br><span class="line">entry.getKey();</span><br><span class="line">entry.getValue();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式二：</span></span><br><span class="line"><span class="keyword">for</span>(Integer key : map.keySet())&#123;</span><br><span class="line">System.out.println(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(Integer value : map.values())&#123;</span><br><span class="line">System.out.println(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式三：</span></span><br><span class="line">Iterator&lt;Map.Entry&lt;Integer,Integer&gt;&gt; it = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">it.next().getValue();</span><br><span class="line">it.next().getKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Queue的遍历"><a href="#Queue的遍历" class="headerlink" title="Queue的遍历"></a>Queue的遍历</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Queue&lt;Integer&gt; q = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> a : q)&#123;</span><br><span class="line">System.out.println(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="keyword">while</span>(q.peek()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.println(q.poll());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Stack的遍历"><a href="#Stack的遍历" class="headerlink" title="Stack的遍历"></a>Stack的遍历</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Stack&lt;Integer&gt; s = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b : s)&#123;</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="keyword">while</span>(s.isEmpty())&#123;</span><br><span class="line">System.out.println(s.pop());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="LinkedList的遍历"><a href="#LinkedList的遍历" class="headerlink" title="LinkedList的遍历"></a>LinkedList的遍历</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> c : list)&#123;</span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="keyword">for</span>(Iterator&lt;Integer&gt; it = list.iterator(); it.hasNext();)&#123;</span><br><span class="line">System.out.println(it.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Arraylist的遍历"><a href="#Arraylist的遍历" class="headerlink" title="Arraylist的遍历"></a>Arraylist的遍历</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; arrlist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> d : arrlist)&#123;</span><br><span class="line">System.out.println(d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="keyword">for</span>(Iterator&lt;Integer&gt; it = arrlist.iterator(); it.hasNext(); )&#123;</span><br><span class="line">System.out.println(it.next());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式三</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arrlist.size();i++)&#123;</span><br><span class="line">System.out.println(arrlist.get(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hashset的遍历方式"><a href="#Hashset的遍历方式" class="headerlink" title="Hashset的遍历方式"></a>Hashset的遍历方式</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span>(String str : set)&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><font color="red" size="5">集合类最简单的遍历方式就是for-each方法，HashMap的遍历只是多了一层Entry对象进行操作</font><p><font color="red"></font><br>&emsp;&emsp;</p>]]></content>
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>八大排序算法总结&amp;时间复杂度&amp;稳定性</title>
      <link href="/2018/07/15/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93&amp;%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6&amp;%E7%A8%B3%E5%AE%9A%E6%80%A7/"/>
      <url>/2018/07/15/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93&amp;%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6&amp;%E7%A8%B3%E5%AE%9A%E6%80%A7/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://img.my.csdn.net/uploads/201211/19/1353292587_2279.png" alt="图片描述"></p><a id="more"></a>]]></content>
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA 简单排序算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>各种数据结构中操作的平均时间复杂度</title>
      <link href="/2018/07/15/%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%AD%E6%93%8D%E4%BD%9C%E7%9A%84%E5%B9%B3%E5%9D%87%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>/2018/07/15/%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%AD%E6%93%8D%E4%BD%9C%E7%9A%84%E5%B9%B3%E5%9D%87%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://uploadfiles.nowcoder.com/images/20180904/7903742_1536068666055_67A1C29518FD71CBB9C32DF8E2033DE7" alt="图片描述"></p><p><img src="https://uploadfiles.nowcoder.com/images/20180411/2313460_1523452987239_072774B6B658B3603E1AA7198722775C" alt="图片描述"></p><a id="more"></a>]]></content>
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA 时间复杂度 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常用数据类型之间的转换</title>
      <link href="/2018/07/10/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
      <url>/2018/07/10/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://gratisography.com/thumbnails/gratisography-282-thumbnail.jpg" alt="图片描述"></p><hr><h2 id="List转换为Array"><a href="#List转换为Array" class="headerlink" title="List转换为Array"></a>List转换为Array</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">String[] strarr = <span class="keyword">new</span> String[list.size()];</span><br><span class="line">list.toArray(strarr);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="Array转换为List"><a href="#Array转换为List" class="headerlink" title="Array转换为List"></a>Array转换为List</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String[] s = &#123;<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>&#125;;</span><br><span class="line">List list = java.util.Arrays.asList(s);</span><br><span class="line">ArrayList newList = <span class="keyword">new</span> ArrayList&lt;&gt;(list)</span><br></pre></td></tr></table></figure><h2 id="String转换为字符串数组"><a href="#String转换为字符串数组" class="headerlink" title="String转换为字符串数组"></a>String转换为字符串数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"This is a String."</span>; <span class="comment">// Convert the above string to a char array.</span></span><br><span class="line"><span class="keyword">char</span>[] arr = str.toCharArray(); <span class="comment">// Display the contents of the char array.</span></span><br></pre></td></tr></table></figure><h2 id="字符串数组转换为String"><a href="#字符串数组转换为String" class="headerlink" title="字符串数组转换为String"></a>字符串数组转换为String</h2><h3 id="如果是-“字符串数组”-转-“字符串”，只能通过循环，没有其它方法"><a href="#如果是-“字符串数组”-转-“字符串”，只能通过循环，没有其它方法" class="headerlink" title="如果是 “字符串数组” 转 “字符串”，只能通过循环，没有其它方法"></a>如果是 “字符串数组” 转 “字符串”，只能通过循环，没有其它方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String[] str = &#123;<span class="string">"abc"</span>, <span class="string">"bcd"</span>, <span class="string">"def"</span>&#125;;<span class="comment">//</span></span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length; i++)&#123;</span><br><span class="line">sb. append(str[i]);</span><br><span class="line">&#125;</span><br><span class="line">String s = sb.toString();</span><br></pre></td></tr></table></figure><h3 id="如果是-“字符数组”-转-“字符串”-可以通过下边的方法"><a href="#如果是-“字符数组”-转-“字符串”-可以通过下边的方法" class="headerlink" title="如果是 “字符数组” 转 “字符串” 可以通过下边的方法"></a>如果是 “字符数组” 转 “字符串” 可以通过下边的方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] data=&#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;<span class="comment">//</span></span><br><span class="line">String s=<span class="keyword">new</span> String(data);</span><br></pre></td></tr></table></figure><h2 id="数组之间的复制"><a href="#数组之间的复制" class="headerlink" title="数组之间的复制"></a>数组之间的复制</h2><p>System提供了一个静态方法arraycopy(),我们可以使用它来实现数组之间的复制。其函数原型是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">void</span> <span class="params">(Object src,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">int</span> srcPos,</span></span></span><br><span class="line"><span class="function"><span class="params">                    Object dest,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">int</span> destPos,</span></span></span><br><span class="line"><span class="function"><span class="params">                    <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">src:源数组；srcPos:源数组要复制的起始位置；</span></span><br><span class="line"><span class="function">dest:目的数组；destPos:目的数组放置的起始位置；length:复制的长度。</span></span><br><span class="line"><span class="function">注意：src and dest都必须是同类型或者可以进行转换类型的数组．</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> JAVA数据类型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA 数据类型 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>

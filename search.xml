<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[字符全排列]]></title>
    <url>%2F2018%2F08%2F30%2F%E5%AD%97%E7%AC%A6%E5%85%A8%E6%8E%92%E5%88%97%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839import java.util.List;import java.util.Collections;import java.util.ArrayList; public class Solution &#123; public ArrayList&lt;String&gt; Permutation(String str) &#123; List&lt;String&gt; res = new ArrayList&lt;&gt;(); if (str != null &amp;&amp; str.length() &gt; 0) &#123; PermutationHelper(str.toCharArray(), 0, res); Collections.sort(res); &#125; return (ArrayList)res; &#125; public void PermutationHelper(char[] cs, int start, List&lt;String&gt; list) &#123; if (start == cs.length - 1) &#123; //当交换发生在最后一个，也是单个字符的特例 String val = String.valueOf(cs); if (!list.contains(val)) //重复字符串的判定（当字符串中存在重复字符时） list.add(val); &#125; else &#123; for (int j = start; j &lt; cs.length; j++) &#123; swap(cs, start, j); //在剩余的字符数组中选择一个字符作为头，剩下的字符递归调用 PermutationHelper(cs, start+1, list); //剩余的字符的全排列 swap(cs, start, j); &#125; &#125; &#125; public void swap(char[] cs, int i, int j) &#123; char temp = cs[i]; cs[i] = cs[j]; cs[j] = temp; &#125; public static void main(String[] args) &#123; Solution p = new Solution(); System.out.println(p.Permutation("abc").toString()); &#125;&#125;]]></content>
      <categories>
        <category>JAVA算法</category>
      </categories>
      <tags>
        <tag>JAVA 算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二叉树遍历递归与非递归java实现]]></title>
    <url>%2F2018%2F08%2F30%2F%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86%E9%80%92%E5%BD%92%E4%B8%8E%E9%9D%9E%E9%80%92%E5%BD%92java%E5%AE%9E%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[二叉树结点结构123456789101112public class TreeNode &#123; int val; TreeNode left; TreeNode right; TreeNode(int x)&#123; val=x; &#125; @Override public String toString()&#123; return "val: "+val; &#125;&#125; 前序遍历递归12345678910/** * 递归先序遍历 **/ public void preOrderRecursion(TreeNode node)&#123; if(node==null) //如果结点为空则返回 return; visit(node);//访问根节点 preOrderRecursion(node.left);//访问左孩子 preOrderRecursion(node.right);//访问右孩子 &#125; 非递归1、首先申请一个新的栈，记为stack。2、将头结点head压入stack中。3、每次从stack中弹出栈顶节点，记为cur，然后打印cur节点的值。如果cur右孩子不为空的话，将cur的右孩子先压入stack中。最后如果cur的左孩子不为空的话，将cur的左孩子压入stack中。4.不断重复步骤3，直到stack为空，全部过程结束。 12345678910111213141516171819/** * 非递归先序遍历二叉树 **/ public List&lt;Integer&gt; preorderTraversal(TreeNode root) &#123; List&lt;Integer&gt; resultList=new ArrayList&lt;&gt;(); Stack&lt;TreeNode&gt; treeStack=new Stack&lt;&gt;(); if(root==null) //如果为空树则返回 return resultList; treeStack.push(root); while(!treeStack.isEmpty())&#123; TreeNode tempNode=treeStack.pop(); if(tempNode!=null)&#123; resultList.add(tempNode.val);//访问根节点 treeStack.push(tempNode.right); //入栈右孩子 treeStack.push(tempNode.left);//入栈左孩子 &#125; &#125; return resultList; &#125; 中序遍历递归12345678910/** * 递归中序遍历 **/ public void preOrderRecursion(TreeNode node)&#123; if(node==null) //如果结点为空则返回 return; preOrderRecursion(node.left);//访问左孩子 visit(node);//访问根节点 preOrderRecursion(node.right);//访问右孩子 &#125; 非递归1、申请一个新的栈，记为stack，申请一个变量cur，初试时令cur等于头节点。2、先把cur节点压入stack中，对以cur节点为头的整颗子树来说，依次吧整颗书的左边界压入栈中，即不断令cur=cur.left，然后重复步骤2。3、不断重复步骤2，直到发现cur为空，此时从stack中弹出一个节点，记为node。打印node的值，并让cur=node.right，然后继续重复步骤2。4.当stack为空并且cur为空时，整个过程结束。 123456789101112131415161718public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123; List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(); Stack&lt;TreeNode&gt; stack = new Stack&lt;TreeNode&gt;(); TreeNode cur = root; while(cur!=null || !stack.empty())&#123; while(cur!=null)&#123; stack.add(cur); cur = cur.left; &#125; cur = stack.pop(); list.add(cur.val); cur = cur.right; &#125; return list;&#125; 后序遍历非递归先采用类似先序遍历，先遍历根结点再右孩子最后左孩子（先序是先根结点再左孩子最后右孩子），最后把遍历的序列逆转即得到了后序遍历 123456789101112131415public List&lt;Integer&gt; postorderTraversal(TreeNode root) &#123; Deque&lt;TreeNode&gt; stack = new LinkedList&lt;&gt;(); stack.push(root); List&lt;Integer&gt; ret = new ArrayList&lt;&gt;(); while (!stack.isEmpty()) &#123; TreeNode node = stack.pop(); if (node != null) &#123; ret.add(node.val); stack.push(node.left); stack.push(node.right); &#125; &#125; Collections.reverse(ret); return ret;&#125;]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA 二叉树遍历</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[判断两链表是否相交]]></title>
    <url>%2F2018%2F08%2F14%2F%E5%88%A4%E6%96%AD%E9%93%BE%E8%A1%A8%E6%98%AF%E5%90%A6%E7%9B%B8%E4%BA%A4%2F</url>
    <content type="text"><![CDATA[1、如何判断两单链表（无环）是否相交？&nbsp;有两种可取的办法： （1）人为构环，将链表A的尾节点指向链表B，再判断是否构环成功？从链表B的头指针往下遍历，如果能够回到B，则说明相交 （2）判断两链表最后一个节点是否相同，如果相交，则尾节点肯定是同一节点 2、如何判断两单链表（不知是否有环）相交？&nbsp;先判断是否有环，判断是否有环可以使用追逐办法，设置两个指针，一个走一步，一个走两步，如果能相遇则说明存在环 &nbsp;&nbsp;（1）两个都没环：回到问题1 &nbsp;&nbsp;（2）一个有环，一个没环：不用判断了，肯定两链表不相交 &nbsp;&nbsp;（3）两个都有环：判断链表A的碰撞点是否出现在链表B的环中，如果在，则相交。（相交时，环必定是两链表共有的） 3、如何寻找两相交链表（不知是否有环）的第一个相交节点？&nbsp;同样，使用追逐办法先判断是否存在环，分情况讨论&nbsp;&nbsp;（1）无环：人为构环，将链表A的尾节点指向链表B，则构成一个带环的单链表。这个问题就转换成寻找带环单链表的环入口节点。 解法参考：http://blog.csdn.net/liuxialong/archive/2011/06/20/6555850.aspx&nbsp;&nbsp;（2）有环：计算出两链表的长度lA、lB，【环的长度和环到入口点长度之和就是链表长度】 计算带环链表长度,解法参考：http://blog.csdn.net/liuxialong/archive/2011/06/20/6555850.aspx&nbsp;&nbsp;&nbsp;如果lA&gt;lB，则链表A指针先走lA-lB，然后链表B指针开始走，两者相遇的点就是相交点&nbsp;&nbsp;&nbsp;如果lB&gt;lA，则链表B指针先走lB-lA，然后链表A指针开始走，两者相遇的点就是相交点]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA 链表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java中的集合类]]></title>
    <url>%2F2018%2F08%2F12%2FJava%E4%B8%AD%E7%9A%84%E9%9B%86%E5%90%88%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[ArrayList、LinkedList、Vector的区别和实现原理。&emsp;&emsp;ArrayList和Vector只能按顺序存储元素（从下标为0的位置开始），删除元素的时候，需要移位并置空，默认初始容量都是10。ArrayList和Vector基于数组实现的，LinkedList基于双向循环链表实现的（含有头结点）。 一、线程安全性&emsp;&emsp; ArrayList和LinkedList不具有线程安全性，用在单线程环境中。如果在并发环境下使用它们，可以用Colletions类中的静态方法synchronizedList()对ArrayList和LinkedList进行调用即可。Vector是线程安全的，即它的大部分方法都包含有关键字synchronized。Vector的效率没有ArrayList和LinkedList高。 二、扩容机制从内部实现机制来讲，ArrayList和Vector都是使用Objec的数组形式来存储的。 ArrayList扩容后的容量是之前的1.5倍，然后，把之前的数据拷贝到新建的数组。 Vector默认情况下扩容后的容量是之前的2倍。Vector可以设置容量增量，而ArrayList不可以。在Vector中有capacityIncrement：向量的大小大于其容量时，容量自动增加的量。如果在创建Vector时，指定了capacityIncrement的大小；则每次当Vector中动态数组容量需要增加时，如果容量的增量大于零，增加的大小都是capacityIncrement。如果容量的增量小于等于零，则每次需要增大容量时，向量的容量将增大为之前的2倍。 三、增删改查的效率ArrayList和Vector中，从指定的位置（用index）检索一个对象，或在集合的末尾插入、删除一个对象的时间是一样的，可表示为O(1)。但是，如果在集合的其他位置增加或移除元素那么花费的时间是O(n)。LinkedList中，在插入、删除集合中任何位置的元素所花费的时间都是一样的—O(1)，但它在索引一个元素的时候比较慢O(n)。 HashMap、HashTable、LindedHashMap、ConcurrentHashMap、WeakHashMap的区别和实现原理HashMap和HashTable原理&emsp;&emsp;当程序试图将一个key-value对放入HashMap中时，程序首先计算该key的hashCode()值，然后对该哈希码值进行再哈希，然后把哈希值和（数组长度-1）进行按位与操作，得到存储的数组下标，如果该位置处没有链表节点，那么就直接把包含&lt;key,value&gt;的节点放入该位置。如果该位置有结点，就对链表进行遍历，看是否有hash，key和要放入的节点相同的节点，如果有的话，就替换该节点的value值，如果没有相同的话，就创建节点放入值，并把该节点插入到链表表头(头插法)。 HashMap和HashTable的区别1、Hashtable是线程安全的，方法是Synchronized的，适合在多线程环境中使用，效率稍低；HashMap不是线程安全的，效率稍高，适合在单线程环境下使用，在多线程场合下使用，需要手动同步HashMap，Collections.synchronizedMap()。 2、 HashMap的key和value都可以为null值，HashTable的key和value都不允许有Null值。 3、HashMap中数组的默认大小是16，而且一定是2的倍数，扩容后的数组长度是之前数组长度的2倍。HashTable中数组默认大小是11，扩容后的数组长度是之前数组长度的2倍+1。 4、哈希值的使用不同。 5、判断是否含有某个键。&emsp;&emsp;在HashMap中，null可以作为键，这样的键只有一个；可以有一个或多个键所对应的值为null。当get()方法返回null值时，既可以表示HashMap中没有该键，也可以表示该键所对应的值为null。因此，在HashMap中不能用get()方法来判断HashMap中是否存在某个键，而应该用containsKey()方法来判断。Hashtable的键值都不能为null，所以可以用get()方法来判断是否含有某个键 ConcurrentHashMap 的原理&emsp;&emsp;在 ConcurrentHashMap 中，不允许用null作为键和值。ConcurrentHashMap使用分段锁技术，将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问，能够实现真正的并发访问。读操作大部分时候都不需要用到锁。只有在size等操作时才需要锁住整个hash 表。它把区间按照并发级别(concurrentLevel)，分成了若干个 segment。ConcurrentHashMap使用segment来分段和管理锁，segment继承自 ReentrantLock，因 此 ConcurrentHashMap使用ReentrantLock来保证线程安全。 Get(Object Key)的实现&emsp;&emsp;get 操作的高效之处在于整个 get 过程不需要加锁，除非读到的值是空的才会加锁重读。之所以不会读到过期的值，是根据 java 内存模型的 happen before 原则，对volatile 字段的写入操作先于读操作，即使两个线程同时修改和获取volatile变量，get 操作也能拿到最新的值，这是用volatile 替换锁的经典应用场景。 Put(K Key,V Value)的实现——用Lock加锁①根据 key 计算出对应的 hash 值；②根据 hash 值找到对应的Segment 对象；③在这个 Segment 中执行具体的 put 操作；插入操作需要经历两个步骤：&emsp;&emsp;第一步判断是否需要对Segment 里的HashEntry 数组进行扩容；&emsp;&emsp;第二步定位添加元素的位置然后放在HashEntry 数组里。 是否需要扩容？&emsp;&emsp;在插入元素前会先判断Segment 里的HashEntry 数组是否超过容量（threshold），如果超过阀值，数组进行扩容。值得一提的是， Segment的扩容判断比HashMap 更恰当，因为HashMap 是在插入元素后判断元素是否已经到达容量的，如果到达了就进行扩容，但是很有可能扩容之后没有新元素插入，这时HashMap 就进行了一次无效的扩容。 ###Move(Object Key)的实现暂无总结 ConcurrentHashMap 的高并发性主要来自于三个方面：1、用分离锁实现多个线程间的更深层次的共享访问。2、用 HashEntry 对象的不变性来降低执行读操作的线程在遍历链表期间对加锁的需求。3、通过对同一个 Volatile 变量的写 / 读访问，协调不同线程间读 / 写操作的内存可见性。 ##WeakHashMap和HashMap的区别WeakHashMap中的key采用的是“弱引用”的方式，只要WeakHashMap中的key不再被外部引用，所对应的键值对就可以被垃圾回收器回收。HashMap中的key采用的是“强引用”的方式，当key不再被外部引用时，只有当这个key从HashMap中删除后，才可以被垃圾回收器回收。 HashMap和TreeMap区别：1.实现方式的区别：HashMap：基于哈希表实现。TreeMap：基于红黑树实现。2.TreeMap能够把它保存的记录根据键排序. HashMap：适用于在Map中插入、删除和查找元素。&emsp; Treemap：适用于按自然顺序或自定义顺序遍历键(key)。&emsp;&nbsp;HashMap通常比TreeMap快一点。 Hashset的实现原理对于HashSet而言，它是基于HashMap实现的，HashSet底层使用HashMap来保存所有元素。HashSet中的元素都存放在HashMap的key上面，而value中的值都是统一的一个 privatestaticfinalObjectPRESENT=newObject(); Collection和Collections的区别Collection是集合类的上级接口，子接口主要有Set和List。 Collections是针对集合类的一个帮助类，提供了操作集合的工具方法：一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作。 happen-before原则123456781、程序次序规则：在一个单独的线程中，按照程序代码的执行流顺序，（时间上）先执行的操作happen—before（时间上）后执行的操作。2、管理锁定规则：一个unlock操作happen—before后面（时间上的先后顺序，下同）对同一个锁的lock操作。3、volatile变量规则：对一个volatile变量的写操作happen—before后面对该变量的读操作。4、线程启动规则：Thread对象的start（）方法happen—before此线程的每一个动作。5、线程终止规则：线程的所有操作都happen—before对此线程的终止检测，可以通过Thread.join（）方法结束、Thread.isAlive（）的返回值等手段检测到线程已经终止执行。6、线程中断规则：对线程interrupt（）方法的调用happen—before发生于被中断线程的代码检测到中断时事件的发生。7、对象终结规则：一个对象的初始化完成（构造函数执行结束）happen—before它的finalize（）方法的开始。8、传递性：如果操作A happen—before操作B，操作B happen—before操作C，那么可以得出A?happen—before操作C。 &emsp;&emsp;]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JAVA全排列问题]]></title>
    <url>%2F2018%2F08%2F12%2FJAVA%E6%B1%82%E8%A7%A3%E5%85%A8%E6%8E%92%E5%88%97%2F</url>
    <content type="text"><![CDATA[一、问题描述给定一个字符串，求出该字符串的全排列。比如：”abc”的全排列是：abc、acb、bac、bca、cab、cba 二、实现思路采用递归的方式求解。每次先选定一个字符，然后进行“若干次”交换，求出在选定这个字符的条件下，所有的全排列，并把字符“复位”再交换回来。至此，一趟全排列完成。第二趟，选定下一个字符，然后进行“若干次”交换，求出在选定这个字符的条件下，所有的全排列，并把字符“复位”再交换回来。 就类似于：(参考网上的解释如下：) 12345678设R=&#123;r1,r2,...rn&#125;是要进行排列的n个元素.Ri=R-&#123;ri&#125;.集合X中元素的全排列记为Perm(X).(ri)Perm(X)表示在全排列Perm(X)的每一个排列前加上前缀ri得到的排列R的全排列可归纳定义如下: 当n=1时,Perm(R)=(r),其中r是集合R中唯一的元素; 当r&gt;1时,Perm(R)由(r1)Perm(r1),(r2)Perm(r2).....(rn)Perm(rn)构成.全排列就是从第一个数字起每个数分别与它后面的数字交换去重的全排列就是从第一个数字起每个数分别与它后面非重复出现的数字交换，用编程的话描述就是第i个数与第j个数交换时，要求[i,j)中没有与第j个数相等的数。 代码实现如下：使用一个LinkedList保存每一种排列，如果字符串中出现有重复的字符，则此方法会求出 重复的排列数，因而LinkedList会保存重复的排列。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354import java.util.Collections;import java.util.LinkedList;public class Permutation &#123; public static void allPermutation(String str)&#123; if(str == null || str.length() == 0) return; //保存所有的全排列 LinkedList&lt;String&gt; listStr = new LinkedList&lt;String&gt;(); allPermutation(str.toCharArray(), listStr, 0); print(listStr);//打印全排列 &#125; private static void allPermutation(char[] c, LinkedList&lt;String&gt; listStr, int start)&#123; if(start == c.length-1) listStr.add(String.valueOf(c)); else&#123; for(int i = start; i &lt;= c.length-1; i++) &#123; swap(c, i, start);//相当于: 固定第 i 个字符 allPermutation(c, listStr, start+1);//求出这种情形下的所有排列 swap(c, start, i);//复位 &#125; &#125; &#125; private static void swap(char[] c, int i, int j)&#123; char tmp; tmp = c[i]; c[i] = c[j]; c[j] = tmp; &#125; private static void print(LinkedList&lt;String&gt; listStr) &#123; Collections.sort(listStr);//使字符串按照'字典顺序'输出 for (String str : listStr) &#123; System.out.println(str); &#125; System.out.println("size:" + listStr.size()); &#125; //hapjin test public static void main(String[] args) &#123;// allPermutation("hapjin"); allPermutation("abc"); &#125;&#125; 如果要想让重复的排列只保存一次，有两种方式：①改进算法，不生成重复的排列 ②用HashSet来保存排列 当字符串中出现重复的字符时，如何生成不重复的排列？—去重的全排列就是从第一个数字起每个数分别与它后面非重复出现的数字交换 代码实现如下：(当有重复字符时，也可生成所有正确的排列(排列不会重复)) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465public class Permutation &#123; public static void allPermutation(String str)&#123; if(str == null || str.length() == 0) return; //保存所有的全排列 LinkedList&lt;String&gt; listStr = new LinkedList&lt;String&gt;(); allPermutation(str.toCharArray(), listStr, 0); print(listStr);//打印全排列 &#125; private static void allPermutation(char[] c, LinkedList&lt;String&gt; listStr, int start)&#123; if(start == c.length-1) listStr.add(String.valueOf(c));//System.out.println(String.valueOf(c)); else&#123; for(int i = start; i &lt;= c.length-1; i++) &#123; //只有当没有重叠的字符 才交换 if(!isSwap(c, start, i)) &#123; swap(c, i, start);//相当于: 固定第 i 个字符 allPermutation(c, listStr, start+1);//求出这种情形下的所有排列 swap(c, start, i);//复位 &#125; &#125; &#125; &#125; private static void swap(char[] c, int i, int j)&#123; char tmp; tmp = c[i]; c[i] = c[j]; c[j] = tmp; &#125; private static void print(LinkedList&lt;String&gt; listStr) &#123; Collections.sort(listStr);//使字符串按照'字典顺序'输出 for (String str : listStr) &#123; System.out.println(str); &#125; System.out.println("size:" + listStr.size()); &#125; //[start,end) 中是否有与 c[end] 相同的字符 private static boolean isSwap(char[] c, int start, int end) &#123; for(int i = start; i &lt; end; i++) &#123; if(c[i] == c[end]) return true; &#125; return false; &#125; //hapjin test public static void main(String[] args) &#123;// allPermutation("hapjin"); allPermutation("aba"); &#125;&#125; 上面的实现将所有的排列顺序都保存到LinkedList了，这是要注意的。当然也可以不保存排列的顺序，直接输出（allPermutation方法）。 123if(start == c.length-1) listStr.add(String.valueOf(c));//保存排列 //System.out.println(String.valueOf(c));//不保存排列,直接输出 原文：http://www.cnblogs.com/hapjin/p/5757810.html]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA 全排列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JVM相关知识点汇总]]></title>
    <url>%2F2018%2F08%2F12%2FJVM%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[JVM的垃圾回收机制Where：运行内存 When：对象何时要被回收：1.引用计数法；2.可达性分析算法。 Minor GC与Full GC分别在什么时候发生？&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果 Eden 空间占满了，会触发 minor GC。Minor GC后仍然存活的对象会被复制到S0中去。这样Eden就被清空可以分配给新的对象。又触发了一次 Minor GC，S0和Eden中存活的对象被复制到S1中，并且S0和Eden被清空。 在同一时刻,只有Eden和一个Survivor Space同时被操作.当每次对象从Eden复制到Survivor Space或者从Survivor Space中的一个复制到另外一个，有一个计数器会自动增加值。默认情况下如果复制发生超过16次，JVM 会停止复制并把他们移到老年代中去。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果一个对象不能在 Eden 中被创建，它会直接被创建在老年代中。如果老年代的空间被占满会触发老年代的 GC，也被称为Full GC。Full GC是一个压缩处理过程，所以它比Minor GC要慢很多。 How：四种垃圾回收算法1.引用计数法2.标记清除法3.标记压缩法4.复制算法 内存泄漏和内存溢出内存泄漏原因（Jconsole查找内存泄漏原因）①静态集合类（长生命周期对象持有短生命周期对象的引用，使得短生命周期对象得不到合理地释放） ②各种连接，建立连接，等不再使用后没有调用close方法关闭连接，垃圾回收器无法回收对应对象导致内存泄漏 ③监听器，在释放监听对象后，没有相应地删除监听器。 ④变量不合理的作用域。一方面变量定义的作用范围大于其使用范围；另一方面，没有及时地吧对象设置成Null。 解决方案1、尽量少使用静态变量（静态变量存放在方法区，基本不参与垃圾回收）； 2、尽早释放无用对象的引用； 3、使用字符串处理，避免使用String,而应该使用StringBuffer； 4、避免在循环中创建对象。 内存溢出原因内存溢出指程序运行过程中无法申请到足够的内存而导致的一种错误 ①虚拟机栈和本地方法栈溢出如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常。如果虚拟机在扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。 ②堆溢出1.判断是内存泄漏还是内存溢出；2.查找原因； ③方法区溢出异常信息：java.lang.OutOfMemoryError:Perm Genspace。 ④运行时常量池溢出异常信息：java.lang.OutOfMemoryError:Perm Genspace。 12345溢出原因：1、内存中加载的数据量过于庞大，如一次从数据库取出过多数据；2、集合类中有对对象的引用，使用完后未清空，使得JVM不能回收；3、代码中存在死循环或循环产生过多重复的对象实体；4、启动参数内存值设定的过小。 如何减少gc 出现的次数（1）对象不用时最好显式置为Null一般而言,为Null的对象都会被作为垃圾处理,所以将不用的对象显式地设为Null,有利于GC收集器判定垃圾,从而提高了GC的效率。 （2）尽量少用System.gc() 此函数建议JVM进行主GC,虽然只是建议而非一定,但很多情况下它会触发主GC,从而增加主GC的频率,也即增加了间歇性停顿的次数。 （3）尽量少用静态变量 静态变量属于全局变量,不会被GC回收,它们会一直占用内存。 （4）尽量使用StringBuffer,而不用String来累加字符串由于String是固定长的字符串对象,累加String对象时,并非在一个String对象中扩增,而是重新创建新的String对象,如Str5=Str1+Str2+Str3+Str4,这条语句执行过程中会产生多个垃圾对象,因为对次作“+”操作时都必须创建新的String对象,但这些过渡对象对系统来说是没有实际意义的,只会增加更多的垃圾。避免这种情况可以改用StringBuffer来累加字符串,因StringBuffer是可变长的,它在原有基础上进行扩增,不会产生中间对象。 （5）分散对象创建或删除的时间 集中在短时间内大量创建新对象,特别是大对象,会导致突然需要大量内存,JVM在面临这种情况时,只能进行主GC,以回收内存或整合内存碎片,从而增加主GC的频率。 （6）尽量少用finalize函数。因为它会加大GC的工作量，因此尽量少用finalize方式回收资源。 （7）如果需要使用经常用到的图片，可以使用软引用类型，它可以尽可能图片保存在内存中，供程序调用，而不引起OutOfMemory。]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线程安全的单例模式编写]]></title>
    <url>%2F2018%2F08%2F12%2F%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%BC%96%E5%86%99%2F</url>
    <content type="text"><![CDATA[利用静态内部类实现单例模式1234567891011public class Singleton &#123; private void Singleton()&#123; &#125; private static class T&#123; private static Singleton t = new Singleton(); &#125; public static Singleton getInstance()&#123; return T.t; &#125;&#125; 使用双重校验锁DCL（double checked locking）12345678910111213141516public class Singleton&#123; private static volatile Singleton instance = null; private void Singleton()&#123; &#125; public static Singleton getInstance()&#123; if (instance == null) &#123; synchronized(Singleton.class)&#123; if (instance == null) &#123; instance = new Singleton(); &#125; &#125; &#125; return instance; &#125;&#125; 使用synchronized关键字123456789101112public class Singleton&#123; private static Singleton s = null; private void Singleton()&#123; &#125; public static synchronized Singleton getInstance()&#123; if (s == null) &#123; s = new Singleton(); &#125; return s; &#125;&#125; &emsp;&emsp;]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线程安全的单例模式编写]]></title>
    <url>%2F2018%2F08%2F12%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[利用静态内部类实现单例模式1234567891011public class Singleton &#123; private Singleton()&#123; &#125; private static class T&#123; private static Singleton t = new Singleton(); &#125; public static Singleton getInstance()&#123; return T.t; &#125;&#125; 使用双重校验锁DCL（double checked locking）12345678910111213141516public class Singleton&#123; private static volatile Singleton instance = null; private Singleton()&#123; &#125; public static Singleton getInstance()&#123; if (instance == null) &#123; synchronized(Singleton.class)&#123; if (instance == null) &#123; instance = new Singleton(); &#125; &#125; &#125; return instance; &#125;&#125; 使用synchronized关键字123456789101112public class Singleton&#123; private static Singleton s = null; private Singleton()&#123; &#125; public static synchronized Singleton getInstance()&#123; if (s == null) &#123; s = new Singleton(); &#125; return s; &#125;&#125; 构造函数的特点1.构造函数必须和类名一样（但和类名一样的不一定是构造方法，普通方法也可以和类名同名），并且 不能有返回值，返回值也不能为void。 2.构造函数总是伴随着new操作一起调用，并且不能由程序的编写者调用，只能由系统调用。 3.构造函数不能被继承。 4.子类可以通过super()来显示调用父类的构造函数。 &emsp;&emsp;]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[各种数据结构中操作的平均时间复杂度]]></title>
    <url>%2F2018%2F07%2F15%2F%E5%90%84%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%AD%E6%93%8D%E4%BD%9C%E7%9A%84%E5%B9%B3%E5%9D%87%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA 时间复杂度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[八大排序算法总结&时间复杂度&稳定性]]></title>
    <url>%2F2018%2F07%2F15%2F%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%26%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%26%E7%A8%B3%E5%AE%9A%E6%80%A7%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA 简单排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用数据类型之间的转换]]></title>
    <url>%2F2018%2F07%2F10%2F%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[List转换为Array123ArrayList&lt;String&gt; list=new ArrayList&lt;String&gt;();String[] strarr = new String[list.size()];list.toArray(strarr); ##Array转换为List 123String[] s = &#123;"a","b","c"&#125;;List list = java.util.Arrays.asList(s);ArrayList newList = new ArrayList&lt;&gt;(list) ##String转换为字符串数组 12String str = "This is a String."; // Convert the above string to a char array.char[] arr = str.toCharArray(); // Display the contents of the char array. ##字符串数组转换为String ###如果是 “字符串数组” 转 “字符串”，只能通过循环，没有其它方法123456String[] str = &#123;"abc", "bcd", "def"&#125;; //StringBuffer sb = new StringBuffer();for(int i = 0; i &lt; str.length; i++)&#123;sb. append(str[i]);&#125;String s = sb.toString(); ###如果是 “字符数组” 转 “字符串” 可以通过下边的方法12char[] data=&#123;'a','b','c'&#125;; //String s=new String(data); ##数组之间的复制System提供了一个静态方法arraycopy(),我们可以使用它来实现数组之间的复制。其函数原型是：12345678public static void (Object src, int srcPos, Object dest, int destPos, int length)src:源数组； srcPos:源数组要复制的起始位置；dest:目的数组； destPos:目的数组放置的起始位置； length:复制的长度。注意：src and dest都必须是同类型或者可以进行转换类型的数组．]]></content>
      <categories>
        <category>JAVA数据类型</category>
      </categories>
      <tags>
        <tag>JAVA 数据类型</tag>
      </tags>
  </entry>
</search>
